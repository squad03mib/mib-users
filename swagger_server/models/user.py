# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, firstname: str=None, lastname: str=None, email: str=None, password: str=None, birthdate: date=None):  # noqa: E501
        """User - a model defined in Swagger

        :param firstname: The firstname of this User.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this User.  # noqa: E501
        :type lastname: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param birthdate: The birthdate of this User.  # noqa: E501
        :type birthdate: date
        """
        self.swagger_types = {
            'firstname': str,
            'lastname': str,
            'email': str,
            'password': str,
            'birthdate': date
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'email': 'email',
            'password': 'password',
            'birthdate': 'birthdate'
        }
        self._firstname = firstname
        self._lastname = lastname
        self._email = email
        self._password = password
        self._birthdate = birthdate

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self) -> str:
        """Gets the firstname of this User.

        First name of customer  # noqa: E501

        :return: The firstname of this User.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this User.

        First name of customer  # noqa: E501

        :param firstname: The firstname of this User.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this User.

        Last name of customer  # noqa: E501

        :return: The lastname of this User.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this User.

        Last name of customer  # noqa: E501

        :param lastname: The lastname of this User.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def email(self) -> str:
        """Gets the email of this User.

        Customer email  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.

        Customer email  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.

        Customer password  # noqa: E501

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.

        Customer password  # noqa: E501

        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def birthdate(self) -> date:
        """Gets the birthdate of this User.

        Customer birthdate  # noqa: E501

        :return: The birthdate of this User.
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate: date):
        """Sets the birthdate of this User.

        Customer birthdate  # noqa: E501

        :param birthdate: The birthdate of this User.
        :type birthdate: date
        """
        if birthdate is None:
            raise ValueError("Invalid value for `birthdate`, must not be `None`")  # noqa: E501

        self._birthdate = birthdate
